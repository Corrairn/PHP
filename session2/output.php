<?php

echo "<pre>";
var_dump($_POST, $_GET, $_FILES); // Извежда POST, GET и FILES масивите


if(!empty($_FILES)) { // Ако $_FILES масивът не е празен - значи имаме изпратен файл. В такъв случйа искаме да го обработим.
	$moved = rename($_FILES['my_file']['tmp_name'], "./{$_FILES['my_file']['name']}"); // В случая се опитваме да го запишем в текущата директория със същото име, с което сме го качили оргинално.

	// Забележка: Когато качвате потребителски файлове внимавайте какво комитвате в GIT.
}

/*
	Дефинира функцията makeNewArray, която приема един параметър без определен тип. Стойността, която връща функцията също не е определена.
*/
function makeNewArray($array) {
	$result = []; // Дефинираме нов масив, в който ще записваме стойности.

	foreach ($array as $key => $value) { // Обхождаме всички елементи на масива, като ни интересуват клочовете и сотойностите.
		if($key == "submit") { // Ако даден ключ е равен на "submit"
			continue; // Продъжаваме със следващият елемент.
		}

		$result[] = $value; // Добавяме съответната стойност в резултатният масив като нов елемент.
	}

	return $result; // Връщаме попълненият нов масив.
}

echo "The text results from the POST: ";
var_dump(makeNewArray($_POST)); /* Извеждаме резултатите от потребителските данни като подаваме на makeNewArray $_POST масива (в който реално са те), а след това подаваме на var_dump функцият резутатът от нашата.

Това е равносилно на следният код:

$result = makeNewArray($_POST);
var_dump($result);

само че пропускаме присвояване на резултата от makeNewArray функцията на нова променлива.
*/
echo "</pre>";